---
- hosts: localhost
  vars_files:
    - vars/packages_vars.yml
    - vars/openshift_vars.yml
    - vars/add_nodes_vars.yml
  tasks:
    - name: Download rhcos-{{ openshift_minor_version }}-{{ architecture }}-installer.iso and rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal.raw.gz
      get_url:
        url: "{{ item }}"
        dest: ./files/
      loop: "{{ openshift_install_url }}"
      ignore_errors: yes
      tags: an1
    - name: rename rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal-bios.raw.gz to rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal.raw.gz
      command: mv files/rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal.x86_64.raw.gz files/rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal.raw.gz
#      command: mv files/rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal-bios.raw.gz files/rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal.raw.gz
      ignore_errors: yes
      tags: an2
    - name: Create ignition file template file for all node
      script: ./add_ocp_static_worker_nodes.sh
      tags: an3
    - name: Create new ignition file for all nodes
      copy:
        src: "/var/www/html/add_worker_nodes.ign"
        dest: "/var/www/html/{{ item.update_ignite_file }}"
      loop: "{{ nodes }}"
      tags: an4
    - name: Create directory for mount openshift ISO file
      file:
        path: "/iso"
        state: directory
      tags: an5
    - name: Mount rhcos-{{ openshift_minor_version }}-{{ architecture }}-installer.iso
      mount:
        path: /iso
        src : "files/rhcos-{{ openshift_minor_version }}-{{ architecture }}-installer.x86_64.iso"
#        src : "files/rhcos-{{ openshift_minor_version }}-{{ architecture }}-installer.iso"
        fstype: iso9660
        opts: ro,loop
        state: mounted
      tags: an6
    - name: Create directory for custom boot openshift ISO
      file:
        path: "/data/iso/{{ item.node_name_short }}"
        state: directory
      loop: "{{ nodes }}"
      tags: an7
    - name: Extract the openshift ISO to a temporary location
      command: "/usr/bin/rsync -a /iso/ /data/iso/{{ item.node_name_short }}"
      loop: "{{ nodes }}"
      tags: an8
    - name: Modify the boot entry for each node directory
      lineinfile:
        dest: "/data/iso/{{ item.node_name_short }}/isolinux/isolinux.cfg"
        regexp: "^  append initrd=/images/initramfs.img nomodeset rd.neednet=1 coreos.inst=yes"
        line: "  append initrd=/images/initramfs.img nomodeset rd.neednet=1 coreos.inst=yes {{ add_boot_entry }}"
      loop: "{{ nodes }}"
      tags: an9
    - name: Create new openshift ISO for all nodes
      shell: 'cd /data/iso/{{ item.node_name_short }}; mkisofs -U -A "{{ item.node_name_short }}" -V "{{ item.node_name_short }}" -volset "{{ item.node_name_short }}" -J -joliet-long -r -v -T -x ./lost+found -o /data/iso/{{ item.node_name_short }}/{{ item.node_name_short }}.iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e images/efiboot.img -no-emul-boot .'
      loop: "{{ nodes }}"
      register: output
      tags: an10
    - name: print
      debug:
        var: output
      tags: an11
    - name: Unmount a openshift ISO file
      mount:
        path: /iso
        state: absent
      tags: an12
    - name: Copy rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal.raw.gz to /var/www/html/
      copy:
        src: "files/rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal.raw.gz"
        dest: /var/www/html/
      tags: an13
