---
- hosts: localhost
  vars_files:
    - vars/packages_vars.yml
    - vars/openshift_vars.yml
    - vars/nodes_vars.yml
  tasks:
    - name: Setup prerequire packages
      yum:
        name: "{{ item }}"
        state: latest
      loop: "{{ packages_list }}"
      tags: vms1
    - name: Ensure the default httpd port is 8080
      lineinfile:
        path: /etc/httpd/conf/httpd.conf
        regexp: '^Listen '
        insertafter: '^#Listen '
        line: Listen 8080
      tags: vms2
    - name: Start and enabled httpd service
      service:
        name: httpd
        state: started
        enabled: yes
      tags: vms3
    - name: Download oc client openshift-install and coreos-installer command
      get_url:
        url: "{{ item }}"
        dest: ./files/
      loop: "{{ openshift_client_url }}"
      tags: vms4
    - name: Download rhcos-{{ openshift_minor_version }}-{{ architecture }}-installer.iso and rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal.raw.gz
      get_url:
        url: "{{ item }}"
        dest: ./files/
      loop: "{{ openshift_install_url }}"
      ignore_errors: yes
      tags: vms5
    - name: rename rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal-bios.raw.gz to rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal.raw.gz
      command: mv files/rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal.x86_64.raw.gz files/rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal.raw.gz
#      command: mv files/rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal-bios.raw.gz files/rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal.raw.gz
      ignore_errors: yes
      tags: vms6
    - name: Setup oc client and openshift-install command
      unarchive:
        src: "{{ item }}"
        dest: /usr/local/bin/
      loop: "{{ openshift_client_file }}"
      tags: vms7
    - name: Setup coreos-installer command
      copy:
        src: ./files/coreos-installer
        dest: /usr/local/bin/
        mode: 0755
      tags: vms8
    - name: Generate an OpenSSH keypair
      command: ssh-keygen -q -t rsa -f ~/.ssh/id_rsa -C "" -N ""
      ignore_errors: yes
      tags: vms9
    - name: Create openshift artifacts folder
      file:
        path: "~/openshift/{{ CLUSTERID }}"
        state: directory
        recurse: yes
      tags: vms10
################ Change templates from this task ################
    - name: Create install-config.yaml file
      template:
#        src: templates/install-config-bare-metal.yml.j2
        src: templates/install-config-vsphere.yaml.j2
        dest: "~/openshift/{{ CLUSTERID }}/install-config.yaml"
      tags: vms11
#################################################################
    - name: Create manifests file
      command: "openshift-install create manifests --dir ~/openshift/{{ CLUSTERID }}/"
      tags: vms12
    - name: Disable masters are schedulable
      lineinfile:
        path: "~/openshift/{{ CLUSTERID }}/manifests/cluster-scheduler-02-config.yml"
        regexp: '  mastersSchedulable: true'
        line: '  mastersSchedulable: false'
      tags: vms13
    - name: Remove the Kubernetes manifest files that define the control plane machines
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - ~/openshift/{{ CLUSTERID }}/openshift/99_openshift-cluster-api_master-machines-0.yaml
        - ~/openshift/{{ CLUSTERID }}/openshift/99_openshift-cluster-api_master-machines-1.yaml
        - ~/openshift/{{ CLUSTERID }}/openshift/99_openshift-cluster-api_master-machines-2.yaml
      tags: vms14
    - name: Remove the Kubernetes manifest files that define the compute machine sets
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - ~/openshift/{{ CLUSTERID }}/openshift/99_openshift-cluster-api_worker-machineset-0.yaml
      tags: vms15
    - name: Create ignition files
      command: "openshift-install create ignition-configs --dir ~/openshift/{{ CLUSTERID }}"
      tags: vms16
    - name: Create new ignition file for all nodes
      copy:
        src: "~/openshift/{{ CLUSTERID }}/{{ item.original_ignite_file }}"
        dest: "/var/www/html/{{ item.update_ignite_file }}"
      loop: "{{ nodes }}"
      tags: vms17
    - name: Copy rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal.raw.gz to /var/www/html/
      copy:
        src: "files/rhcos-{{ openshift_minor_version }}-{{ architecture }}-metal.raw.gz"
        dest: /var/www/html/
      tags: vms18
    - name: Create append-bootstrap file for your bootstrap node
      template:
        src: templates/append-bootstrap.ign.j2
        dest: /var/www/html/append-bootstrap.ign
      tags: vms19
    - name: Covert the master, worker and secondary bootstrap ignition config files to Base64 encoding
      shell: |
        /usr/bin/base64 -w0 /var/www/html/{{ item.update_ignite_file }} > /var/www/html/{{ item.base64_ignite_file }}
        /usr/bin/base64 -w0 /var/www/html/append-bootstrap.ign > /var/www/html/append-bootstrap.64
      loop: "{{ nodes }}"
      tags: vms20
    - name: Create new openshift ISO for all nodes
      copy:
        src: "./files/rhcos-{{ openshift_minor_version }}-{{ architecture }}-live.x86_64.iso"
        dest: "/data/{{ item.node_name_short }}-embedded.iso"
      loop: "{{ nodes }}"
      tags: vms21
    - name: Create new openshift ISO for append-bootstrap
      copy:
        src: "./files/rhcos-{{ openshift_minor_version }}-{{ architecture }}-live.x86_64.iso"
        dest: "/data/append-bootstrap-embedded.iso"
      tags: vms22
    - name: Embedding an Ignition config in the RHCOS ISO
      command: coreos-installer iso ignition embed -i /var/www/html/{{ item.update_ignite_file }} /data/{{ item.node_name_short }}-embedded.iso
      loop: "{{ nodes }}"
      tags: vms23
    - name: Embedding an append-bootstrap Ignition config in the RHCOS ISO
      command: coreos-installer iso ignition embed -i /var/www/html/append-bootstrap.ign /data/append-bootstrap-embedded.iso
      tags: vms24






    - name: Create directory for mount openshift ISO file
      file:
        path: "/iso/{{ item.node_name_short }}-embedded"
        state: directory
      loop: "{{ nodes }}"
      tags: vms25

    - name: Create directory for mount append-bootstrap ISO file
      file:
        path: "/iso/append-bootstrap-embedded"
        state: directory
      tags: vms26

    - name: Mount openshift embedded ISO for all nodes
      mount:
        path: "/iso/{{ item.node_name_short }}-embedded"
        src : "/data/{{ item.node_name_short }}-embedded.iso"
        fstype: iso9660
        opts: ro,loop
        state: mounted
      loop: "{{ nodes }}"
      tags: vms27

    - name: Mount openshift embedded ISO for append-bootstrap
      mount:
        path: "/iso/append-bootstrap-embedded"
        src : "/data/append-bootstrap-embedded.iso"
        fstype: iso9660
        opts: ro,loop
        state: mounted
      tags: vms28

    - name: Extract the openshift ISO to a temporary location
      command: "/usr/bin/rsync -a /iso/{{ item.node_name_short }}-embedded /data/iso/"
      loop: "{{ nodes }}"
      tags: vms29

    - name: Extract the append-bootstrap ISO to a temporary location
      command: "/usr/bin/rsync -a /iso/append-bootstrap-embedded /data/iso/"
      tags: vms30

    - name: Modify the boot entry for each node directory
      lineinfile:
        dest: "/data/iso/{{ item.node_name_short }}-embedded/isolinux/isolinux.cfg"
        regexp: "^{{ kernel_args }}"
        line: "{{ kernel_args_update }} {{ add_boot_entry }}"
      loop: "{{ nodes }}"
      tags: vms31


    - name: Modify the boot entry for append-bootstrap directory
      lineinfile:
        dest: "/data/iso/append-bootstrap-embedded/isolinux/isolinux.cfg"
        regexp: "^{{ kernel_args }}"
        line: "{{ kernel_args_update }} {{ add_boot_entry }}"
      loop: "{{ nodes }}"
      when: item.node_name_short == "bootstrap"
      tags: vms32


    - name: Create new openshift ISO for all nodes
      shell: 'cd /data/iso/{{ item.node_name_short }}-embedded; mkisofs -U -A "{{ item.node_name_short }}" -V "{{ item.node_name_short }}" -volset "{{ item.node_name_short }}" -J -joliet-long -r -v -T -x ./lost+found -o /data/{{ item.node_name_short }}.iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e images/efiboot.img -no-emul-boot .'
      loop: "{{ nodes }}"
      register: output
      tags: vms33
    - name: print
      debug:
        var: output
      tags: vms34


    - name: Create new append-bootstrap ISO nodes
      shell: 'cd /data/iso/append-bootstrap-embedded; mkisofs -U -A "append-bootstrap" -V "append-bootstrap" -volset "append-bootstrap" -J -joliet-long -r -v -T -x ./lost+found -o /data/append-bootstrap.iso -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -eltorito-alt-boot -e images/efiboot.img -no-emul-boot .'
      register: output
      tags: vms35
    - name: print
      debug:
        var: output
      tags: vms36

    - name: Unmount a openshift ISO file
      mount:
        path: /iso/{{ item.node_name_short }}-embedded
        state: absent
      loop: "{{ nodes }}"
      tags: vms37

    - name: Unmount a append-bootstrap ISO file
      mount:
        path: /iso/append-bootstrap-embedded
        state: absent
      tags: vms38

    - name: Remove openshift embedded ISO for all nodes
      file:
        path: /data/{{ item.node_name_short }}-embedded.iso
        state: absent
      loop: "{{ nodes }}"
      tags: vms39

    - name: Remove openshift embedded ISO for append-bootstrap
      file:
        path: /data/append-bootstrap-embedded.iso
        state: absent
      tags: vms40
      
      
